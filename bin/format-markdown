#!/usr/bin/env perl

use v5.18;

use Encode qw(decode encode);

my $L = 0;
my @l = ();
my $l = '';

sub in {
  decode('UTF-8', <>, Encode::FB_CROAK);
}
sub out {
  my ($out) = @_;
  print encode('UTF-8', $out, Encode::FB_CROAK);
}
sub peek {
  $_ = @l ? $l[0] : '';
}
sub take {
  $_ = shift(@l);
}
sub poke {
  unshift @l, @_ ? (shift) : $_;
  $_ = @l ? $l[0] : '';
}
sub give {
  unshift(@l, "$_[0]\n");
}
sub space {
  out take while peek eq "\n";
  out take if @l == 1;
  return 1;
}


sub lines {
  my ($p, $m, $f) = @_;
  $p //= '';
  $m //= 79;
  $f //= 1;
  while (my $s = $l) {
    my $m2 = $m - 2;
    my $m3 = $m - 4;
    if (length $l <= $m) {
      out "$p$l\n";
      last;
    }
    elsif ($l =~ s{^(\ \ \*\ .{10,$m3}\S)(?:$|\ (?=\S))}{}) {
      out "$p$1\n";
    }
    elsif ($l =~ s{^(.{5,$m2}\ \ )$/}{}) {
      out "$p$1\n";
    }
    elsif ($l =~ s{^(\S.{10,$m2}\S)(?:$|\ (?=\S))}{}) {
      out "$p$1\n";
    }
    else {
      die ">>$l<<";
    }
    if ($f) {
      $f = 0;
      if ($s =~ /^\*\ /) {
        $p = '  ';
        $m -= 2;
      }
      elsif ($s =~ /^\ {2}\*\ /) {
        $p = '    ';
        $m -= 4;
      }
      elsif ($s =~ /^\ /) {
        die "Unsupported line '$s'";
      }
    }
  }
}

sub wrap {
  my $end = shift;
  my @l;
  while (peek =~ /./ and peek !~ /^:/) {
    my $line = take;
    chomp $line;
    $line =~ s/^\ +(?=\S)(?!\*)//;
    push @l, $line;
    last if $end->($line);
  }
  $l = join ' ', @l;
  $l =~ s{\]\(\ }{](};
  lines;
  space;
  return 1;
}

sub lis2 {
  my @l;
  while (peek =~ /^\ \ \S/) {
    my $line = take;
    chomp $line;
    $line =~ s/^\ \ //;
    push @l, $line;
    last if $line =~ /(  |\.)$/;
  }
  $l = join ' ', @l;
  $l =~ s{\]\(\ }{](};
  lines('  ', 77, 0);
  space;
  return 1;
}

sub titl {
    out take;
    out take;
    space;
}

sub head {
  out take;
  out take if peek =~ /^\{:/;
  space;
}

sub line {
  out take;
}

sub para {
  my $end = sub { $_[0] =~ /(  |[\.\!\?])$/ };
  wrap $end;
}

sub ddef {
  out take;
}

sub list {
  my $end = sub { peek =~ /^(?:\s{0,2}\*\ |$)/ };
  wrap($end);
}

sub toc {
  line;
  line;
  space;
}

sub pre {
  line;
  line while peek !~ /^\`\`\`$/;
  line;
  line while peek =~ /^<!-- .* -->$/;
  space;
}

sub tabl {
  line while peek =~ /^\|\ /;
  space;
}

sub leg {
  line;
  line while peek =~ /^\*\ /;
  space;
}

sub comm {
  my $line = take;
  out $line;
  if ($line !~ /-->/) {
    while (peek !~ /-->$/) {
      out take;
    }
    out take;
  }
  space;
}

sub unknown {
  my $line = take;
  my $show = $line;
  chomp $show;
  my $num = $L - @l + 1;
  warn "Unrecognized line (#$num): >>$show<<\n";
  out $line;
  space;
}

#------------------------------------------------------------------------------
sub main {
  push @l, $_ while $_ = in;
  $L = @l;

  if (peek =~ /^---$/) {
    out take;
    out take while peek !~ /^---$/;
    out take;
    space;
  }

  while (my $peek = peek) {
    titl and next if @l >= 2 and $l[1] =~ /^===+$/;
    head and next if $peek =~ /^#+\ /;
    line and next if $peek =~ /^\[\^/;
    line and space and next if $peek =~ /^\[\#\S+\]$/;
    leg  and next if $peek =~ /^\*\*Legend:\*\*$/;
    toc  and next if $peek =~ /^\{:toc\}$/;
    pre  and next if $peek =~ /^\`\`\`$/;
    list and next if $peek =~ /^\ {0,2}\*\ /;
    lis2 and next if $peek =~ /^\ \ \S/;
    tabl and next if $peek =~ /^\|\ /;
    comm and next if $peek =~ /^<!--/;
    ddef and next if $peek =~ /^:\n/;
    para and next if $peek =~ /^(
      [\w\#\*"`] |
      \[\w |
      \!\[ |
      \(\w |
      \>\ |
      \[\"\*\*
    )/x;

    unknown;
  }
}

main(@ARGV);
